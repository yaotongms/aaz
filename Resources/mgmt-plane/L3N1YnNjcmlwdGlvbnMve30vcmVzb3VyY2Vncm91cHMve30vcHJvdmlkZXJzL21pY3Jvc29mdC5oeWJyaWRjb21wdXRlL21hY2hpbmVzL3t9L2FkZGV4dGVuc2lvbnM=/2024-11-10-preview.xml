<?xml version='1.0' encoding='utf-8'?>
<CodeGen plane="mgmt-plane">
  <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hybridcompute/machines/{}/addextensions" version="2024-11-10-preview" swagger="mgmt-plane/hybridcompute/ResourceProviders/Microsoft.HybridCompute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSHlicmlkQ29tcHV0ZS9tYWNoaW5lcy97bWFjaGluZU5hbWV9L2FkZEV4dGVuc2lvbnM=/V/MjAyNC0xMS0xMC1wcmV2aWV3"/>
  <commandGroup name="connectedmachine extension">
    <command name="add-extensions" version="2024-11-10-preview" confirmation="">
      <resource id="/subscriptions/{}/resourcegroups/{}/providers/microsoft.hybridcompute/machines/{}/addextensions" version="2024-11-10-preview" swagger="mgmt-plane/hybridcompute/ResourceProviders/Microsoft.HybridCompute/Paths/L3N1YnNjcmlwdGlvbnMve3N1YnNjcmlwdGlvbklkfS9yZXNvdXJjZUdyb3Vwcy97cmVzb3VyY2VHcm91cE5hbWV9L3Byb3ZpZGVycy9NaWNyb3NvZnQuSHlicmlkQ29tcHV0ZS9tYWNoaW5lcy97bWFjaGluZU5hbWV9L2FkZEV4dGVuc2lvbnM=/V/MjAyNC0xMS0xMC1wcmV2aWV3"/>
      <argGroup name="">
        <arg type="string" var="$Path.machineName" options="machine-name" required="True" idPart="name">
          <help short="The name of the hybrid machine."/>
          <format pattern="^[a-zA-Z0-9-_\.]{1,54}$" maxLength="54" minLength="1"/>
        </arg>
        <arg type="ResourceGroupName" var="$Path.resourceGroupName" options="resource-group g" required="True" idPart="resource_group"/>
        <arg type="SubscriptionId" var="$Path.subscriptionId" options="subscription" required="True" idPart="subscription"/>
      </argGroup>
      <argGroup name="Extensions">
        <arg type="array<object>" var="$extensions.extensions" options="extensions" group="Extensions">
          <help short="The list of extensions"/>
          <item type="object">
            <arg type="boolean" var="$extensions.extensions[].autoUpgradeMinorVersion" options="auto-upgrade-minor-version">
              <help short="Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."/>
            </arg>
            <arg type="boolean" var="$extensions.extensions[].enableAutomaticUpgrade" options="enable-automatic-upgrade">
              <help short="Indicates whether the extension should be automatically upgraded by the platform if there is a newer version available."/>
            </arg>
            <arg type="string" var="$extensions.extensions[].forceUpdateTag" options="force-update-tag">
              <help short="How the extension handler should be forced to update even if the extension configuration has not changed."/>
            </arg>
            <arg type="object" var="$extensions.extensions[].instanceView" options="instance-view">
              <help short="The machine extension instance view."/>
              <arg type="string" var="$extensions.extensions[].instanceView.name" options="name">
                <help short="The machine extension name."/>
              </arg>
              <arg type="object" var="$extensions.extensions[].instanceView.status" options="status">
                <help short="Instance view status."/>
                <arg type="string" var="$extensions.extensions[].instanceView.status.code" options="code">
                  <help short="The status code."/>
                </arg>
                <arg type="string" var="$extensions.extensions[].instanceView.status.displayStatus" options="display-status">
                  <help short="The short localizable label for the status."/>
                </arg>
                <arg type="string" var="$extensions.extensions[].instanceView.status.level" options="level">
                  <help short="The level code."/>
                  <enum>
                    <item name="Error" value="&quot;Error&quot;"/>
                    <item name="Info" value="&quot;Info&quot;"/>
                    <item name="Warning" value="&quot;Warning&quot;"/>
                  </enum>
                </arg>
                <arg type="string" var="$extensions.extensions[].instanceView.status.message" options="message">
                  <help short="The detailed status message, including for alerts and error messages."/>
                </arg>
                <arg type="dateTime" var="$extensions.extensions[].instanceView.status.time" options="time">
                  <help short="The time of the status."/>
                </arg>
              </arg>
              <arg type="string" var="$extensions.extensions[].instanceView.type" options="type">
                <help short="Specifies the type of the extension; an example is &quot;CustomScriptExtension&quot;."/>
              </arg>
              <arg type="string" var="$extensions.extensions[].instanceView.typeHandlerVersion" options="type-handler-version">
                <help short="Specifies the version of the script handler."/>
              </arg>
            </arg>
            <arg type="object" var="$extensions.extensions[].protectedSettings" options="protected-settings">
              <help short="The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all."/>
              <additionalProp anyType="True"/>
            </arg>
            <arg type="string" var="$extensions.extensions[].publisher" options="publisher">
              <help short="The name of the extension handler publisher."/>
            </arg>
            <arg type="object" var="$extensions.extensions[].settings" options="settings">
              <help short="Json formatted public settings for the extension."/>
              <additionalProp anyType="True"/>
            </arg>
            <arg type="string" var="$extensions.extensions[].type" options="type">
              <help short="Specifies the type of the extension; an example is &quot;CustomScriptExtension&quot;."/>
            </arg>
            <arg type="string" var="$extensions.extensions[].typeHandlerVersion" options="type-handler-version">
              <help short="Specifies the version of the script handler."/>
            </arg>
          </item>
        </arg>
      </argGroup>
      <operation operationId="SetupExtensions">
        <longRunning finalStateVia="azure-async-operation"/>
        <http path="/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}/addExtensions">
          <request method="post">
            <path>
              <param type="string" name="machineName" arg="$Path.machineName" required="True">
                <format pattern="^[a-zA-Z0-9-_\.]{1,54}$" maxLength="54" minLength="1"/>
              </param>
              <param type="string" name="resourceGroupName" arg="$Path.resourceGroupName" required="True">
                <format maxLength="90" minLength="1"/>
              </param>
              <param type="string" name="subscriptionId" arg="$Path.subscriptionId" required="True">
                <format minLength="1"/>
              </param>
            </path>
            <query>
              <const readOnly="True" const="True" type="string" name="api-version" required="True">
                <default value="&quot;2024-11-10-preview&quot;"/>
                <format minLength="1"/>
              </const>
            </query>
            <body>
              <json>
                <schema type="object" name="extensions" required="True" clientFlatten="True">
                  <prop type="array<object>" name="extensions" arg="$extensions.extensions">
                    <item type="object">
                      <prop type="boolean" name="autoUpgradeMinorVersion" arg="$extensions.extensions[].autoUpgradeMinorVersion"/>
                      <prop type="boolean" name="enableAutomaticUpgrade" arg="$extensions.extensions[].enableAutomaticUpgrade"/>
                      <prop type="string" name="forceUpdateTag" arg="$extensions.extensions[].forceUpdateTag"/>
                      <prop type="object" name="instanceView" arg="$extensions.extensions[].instanceView">
                        <prop type="string" name="name" arg="$extensions.extensions[].instanceView.name"/>
                        <prop type="object" name="status" arg="$extensions.extensions[].instanceView.status">
                          <prop type="string" name="code" arg="$extensions.extensions[].instanceView.status.code"/>
                          <prop type="string" name="displayStatus" arg="$extensions.extensions[].instanceView.status.displayStatus"/>
                          <prop type="string" name="level" arg="$extensions.extensions[].instanceView.status.level">
                            <enum>
                              <item value="&quot;Error&quot;"/>
                              <item value="&quot;Info&quot;"/>
                              <item value="&quot;Warning&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="message" arg="$extensions.extensions[].instanceView.status.message"/>
                          <prop type="dateTime" name="time" arg="$extensions.extensions[].instanceView.status.time"/>
                        </prop>
                        <prop type="string" name="type" arg="$extensions.extensions[].instanceView.type"/>
                        <prop type="string" name="typeHandlerVersion" arg="$extensions.extensions[].instanceView.typeHandlerVersion"/>
                      </prop>
                      <prop type="object" name="protectedSettings" arg="$extensions.extensions[].protectedSettings">
                        <additionalProp anyType="True"/>
                      </prop>
                      <prop type="string" name="publisher" arg="$extensions.extensions[].publisher"/>
                      <prop type="object" name="settings" arg="$extensions.extensions[].settings">
                        <additionalProp anyType="True"/>
                      </prop>
                      <prop type="string" name="type" arg="$extensions.extensions[].type"/>
                      <prop type="string" name="typeHandlerVersion" arg="$extensions.extensions[].typeHandlerVersion"/>
                    </item>
                  </prop>
                </schema>
              </json>
            </body>
          </request>
          <response statusCode="200">
            <body>
              <json var="$Instance">
                <schema type="object">
                  <prop type="array<object>" name="extensions">
                    <item type="object">
                      <prop type="boolean" name="autoUpgradeMinorVersion"/>
                      <prop type="boolean" name="enableAutomaticUpgrade"/>
                      <prop type="string" name="forceUpdateTag"/>
                      <prop type="object" name="instanceView">
                        <prop type="string" name="name"/>
                        <prop type="object" name="status">
                          <prop type="string" name="code"/>
                          <prop type="string" name="displayStatus"/>
                          <prop type="string" name="level">
                            <enum>
                              <item value="&quot;Error&quot;"/>
                              <item value="&quot;Info&quot;"/>
                              <item value="&quot;Warning&quot;"/>
                            </enum>
                          </prop>
                          <prop type="string" name="message"/>
                          <prop type="dateTime" name="time"/>
                        </prop>
                        <prop type="string" name="type"/>
                        <prop type="string" name="typeHandlerVersion"/>
                      </prop>
                      <prop type="object" name="protectedSettings">
                        <additionalProp anyType="True"/>
                      </prop>
                      <prop readOnly="True" type="string" name="provisioningState"/>
                      <prop type="string" name="publisher"/>
                      <prop type="object" name="settings">
                        <additionalProp anyType="True"/>
                      </prop>
                      <prop type="string" name="type"/>
                      <prop type="string" name="typeHandlerVersion"/>
                    </item>
                  </prop>
                </schema>
              </json>
            </body>
          </response>
          <response statusCode="202">
            <header>
              <item name="Azure-AsyncOperation"/>
              <item name="Location"/>
              <item name="Retry-After"/>
            </header>
          </response>
          <response isError="True">
            <body>
              <json>
                <schema type="@MgmtErrorFormat"/>
              </json>
            </body>
          </response>
        </http>
      </operation>
      <output type="object" ref="$Instance" clientFlatten="True"/>
    </command>
  </commandGroup>
</CodeGen>
